/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const true_: u32 = 1;
    pub const false_: u32 = 0;
    pub const __bool_true_false_are_defined: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _FEATURES_H: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_POSIX_IMPLICITLY: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 28;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 1;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __int_least8_t = root::__int8_t;
    pub type __uint_least8_t = root::__uint8_t;
    pub type __int_least16_t = root::__int16_t;
    pub type __uint_least16_t = root::__uint16_t;
    pub type __int_least32_t = root::__int32_t;
    pub type __uint_least32_t = root::__uint32_t;
    pub type __int_least64_t = root::__int64_t;
    pub type __uint_least64_t = root::__uint64_t;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type int_least8_t = root::__int_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RSnowboyDetect {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RSnowboyVad {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn detect_create(
            resource_filename: *const ::std::os::raw::c_char,
            model_str: *const ::std::os::raw::c_char,
        ) -> *mut root::RSnowboyDetect;
    }
    extern "C" {
        pub fn detect_reset(detector: *mut root::RSnowboyDetect) -> bool;
    }
    extern "C" {
        pub fn detect_run_char_detection(
            detector: *mut root::RSnowboyDetect,
            data: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_run_float_array_detection(
            detector: *mut root::RSnowboyDetect,
            data: *const f32,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_run_short_array_detection(
            detector: *mut root::RSnowboyDetect,
            data: *const i16,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_run_integer_array_detection(
            detector: *mut root::RSnowboyDetect,
            data: *const i32,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_set_sensitivity(
            detector: *mut root::RSnowboyDetect,
            sensitivity_str: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        pub fn detect_get_sensitivity(
            detector: *mut root::RSnowboyDetect,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn detect_set_audio_gain(detector: *mut root::RSnowboyDetect, audio_gain: f32);
    }
    extern "C" {
        pub fn detect_update_model(detector: *mut root::RSnowboyDetect);
    }
    extern "C" {
        pub fn detect_num_hotwords(detector: *mut root::RSnowboyDetect) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_apply_frontend(detector: *mut root::RSnowboyDetect, apply_frontend: bool);
    }
    extern "C" {
        pub fn detect_sample_rate(detector: *mut root::RSnowboyDetect) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_num_channels(detector: *mut root::RSnowboyDetect) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_bits_per_sample(detector: *mut root::RSnowboyDetect)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn detect_destroy(detector: *mut root::RSnowboyDetect);
    }
    extern "C" {
        pub fn vad_create(
            resource_filename: *const ::std::os::raw::c_char,
        ) -> *mut root::RSnowboyVad;
    }
    extern "C" {
        pub fn vad_reset(vad: *mut root::RSnowboyVad) -> bool;
    }
    extern "C" {
        pub fn vad_run_char(
            vad: *mut root::RSnowboyVad,
            data: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_run_float_array(
            vad: *mut root::RSnowboyVad,
            data: *const f32,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_run_short_array(
            vad: *mut root::RSnowboyVad,
            data: *const i16,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_run_integer_array(
            vad: *mut root::RSnowboyVad,
            data: *const i32,
            array_length: ::std::os::raw::c_int,
            is_end: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_set_audio_gain(vad: *mut root::RSnowboyVad, audio_gain: f32);
    }
    extern "C" {
        pub fn vad_apply_frontend(vad: *mut root::RSnowboyVad, apply_frontend: bool);
    }
    extern "C" {
        pub fn vad_sample_rate(vad: *mut root::RSnowboyVad) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_num_channels(vad: *mut root::RSnowboyVad) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_bits_per_sample(vad: *mut root::RSnowboyVad) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vad_destroy(vad: *mut root::RSnowboyVad);
    }
}
